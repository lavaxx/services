// Code generated by protoc-gen-lava. DO NOT EDIT.
// versions:
// - protoc-gen-lava v0.1.0
// - protoc         v3.17.3
// source: entry/user/user_pb/user.proto

package user_pb

import (
	gin "github.com/gin-gonic/gin"
	grpcc "github.com/pubgo/lava/clients/grpcc"
	xgen "github.com/pubgo/lava/xgen"
	xerror "github.com/pubgo/xerror"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

func GetUserClient(srv string, opts ...func(cfg *grpcc.Cfg)) UserClient {
	return &userClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &CreateRequest{},
		Output:       &CreateResponse{},
		Service:      "user.User",
		Name:         "Create",
		Method:       "POST",
		Path:         "/user-pb/user/create",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ReadRequest{},
		Output:       &ReadResponse{},
		Service:      "user.User",
		Name:         "Read",
		Method:       "POST",
		Path:         "/user-pb/user/read",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &UpdateRequest{},
		Output:       &UpdateResponse{},
		Service:      "user.User",
		Name:         "Update",
		Method:       "POST",
		Path:         "/user-pb/user/update",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &DeleteRequest{},
		Output:       &DeleteResponse{},
		Service:      "user.User",
		Name:         "Delete",
		Method:       "POST",
		Path:         "/user-pb/user/delete",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &UpdatePasswordRequest{},
		Output:       &UpdatePasswordResponse{},
		Service:      "user.User",
		Name:         "UpdatePassword",
		Method:       "POST",
		Path:         "/user-pb/user/update-password",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &LoginRequest{},
		Output:       &LoginResponse{},
		Service:      "user.User",
		Name:         "Login",
		Method:       "POST",
		Path:         "/user-pb/user/login",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &LogoutRequest{},
		Output:       &LogoutResponse{},
		Service:      "user.User",
		Name:         "Logout",
		Method:       "POST",
		Path:         "/user-pb/user/logout",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ReadSessionRequest{},
		Output:       &ReadSessionResponse{},
		Service:      "user.User",
		Name:         "ReadSession",
		Method:       "POST",
		Path:         "/user-pb/user/read-session",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &VerifyEmailRequest{},
		Output:       &VerifyEmailResponse{},
		Service:      "user.User",
		Name:         "VerifyEmail",
		Method:       "POST",
		Path:         "/user-pb/user/verify-email",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &SendVerificationEmailRequest{},
		Output:       &SendVerificationEmailResponse{},
		Service:      "user.User",
		Name:         "SendVerificationEmail",
		Method:       "POST",
		Path:         "/user-pb/user/send-verification-email",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &SendPasswordResetEmailRequest{},
		Output:       &SendPasswordResetEmailResponse{},
		Service:      "user.User",
		Name:         "SendPasswordResetEmail",
		Method:       "POST",
		Path:         "/user-pb/user/send-password-reset-email",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ResetPasswordRequest{},
		Output:       &ResetPasswordResponse{},
		Service:      "user.User",
		Name:         "ResetPassword",
		Method:       "POST",
		Path:         "/user-pb/user/reset-password",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ListRequest{},
		Output:       &ListResponse{},
		Service:      "user.User",
		Name:         "List",
		Method:       "POST",
		Path:         "/user-pb/user/list",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterUserServer, mthList)
	xgen.Add(RegisterUserGinServer, nil)
}
func RegisterUserGinServer(r gin.IRouter, server UserServer) {
	xerror.Assert(r == nil || server == nil, "router or server is nil")
	r.Handle("POST", "/user-pb/user/create", func(ctx *gin.Context) {
		var req = new(CreateRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Create(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user-pb/user/read", func(ctx *gin.Context) {
		var req = new(ReadRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Read(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user-pb/user/update", func(ctx *gin.Context) {
		var req = new(UpdateRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Update(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user-pb/user/delete", func(ctx *gin.Context) {
		var req = new(DeleteRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Delete(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user-pb/user/update-password", func(ctx *gin.Context) {
		var req = new(UpdatePasswordRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.UpdatePassword(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user-pb/user/login", func(ctx *gin.Context) {
		var req = new(LoginRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Login(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user-pb/user/logout", func(ctx *gin.Context) {
		var req = new(LogoutRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Logout(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user-pb/user/read-session", func(ctx *gin.Context) {
		var req = new(ReadSessionRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.ReadSession(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user-pb/user/verify-email", func(ctx *gin.Context) {
		var req = new(VerifyEmailRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.VerifyEmail(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user-pb/user/send-verification-email", func(ctx *gin.Context) {
		var req = new(SendVerificationEmailRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.SendVerificationEmail(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user-pb/user/send-password-reset-email", func(ctx *gin.Context) {
		var req = new(SendPasswordResetEmailRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.SendPasswordResetEmail(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user-pb/user/reset-password", func(ctx *gin.Context) {
		var req = new(ResetPasswordRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.ResetPassword(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user-pb/user/list", func(ctx *gin.Context) {
		var req = new(ListRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.List(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
}
