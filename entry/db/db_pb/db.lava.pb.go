// Code generated by protoc-gen-lava. DO NOT EDIT.
// versions:
// - protoc-gen-lava v0.1.0
// - protoc         v3.17.3
// source: entry/db/db_pb/db.proto

package db_pb

import (
	gin "github.com/gin-gonic/gin"
	grpcc "github.com/pubgo/lava/clients/grpcc"
	xgen "github.com/pubgo/lava/xgen"
	xerror "github.com/pubgo/xerror"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

func GetDbClient(srv string, opts ...func(cfg *grpcc.Cfg)) DbClient {
	return &dbClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &CreateRequest{},
		Output:       &CreateResponse{},
		Service:      "db.Db",
		Name:         "Create",
		Method:       "POST",
		Path:         "/db/db/create",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ReadRequest{},
		Output:       &ReadResponse{},
		Service:      "db.Db",
		Name:         "Read",
		Method:       "POST",
		Path:         "/db/db/read",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &UpdateRequest{},
		Output:       &UpdateResponse{},
		Service:      "db.Db",
		Name:         "Update",
		Method:       "POST",
		Path:         "/db/db/update",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &DeleteRequest{},
		Output:       &DeleteResponse{},
		Service:      "db.Db",
		Name:         "Delete",
		Method:       "POST",
		Path:         "/db/db/delete",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &TruncateRequest{},
		Output:       &TruncateResponse{},
		Service:      "db.Db",
		Name:         "Truncate",
		Method:       "POST",
		Path:         "/db/db/truncate",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &CountRequest{},
		Output:       &CountResponse{},
		Service:      "db.Db",
		Name:         "Count",
		Method:       "POST",
		Path:         "/db/db/count",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &RenameTableRequest{},
		Output:       &RenameTableResponse{},
		Service:      "db.Db",
		Name:         "RenameTable",
		Method:       "POST",
		Path:         "/db/db/rename-table",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ListTablesRequest{},
		Output:       &ListTablesResponse{},
		Service:      "db.Db",
		Name:         "ListTables",
		Method:       "POST",
		Path:         "/db/db/list-tables",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &DropTableRequest{},
		Output:       &DropTableResponse{},
		Service:      "db.Db",
		Name:         "DropTable",
		Method:       "POST",
		Path:         "/db/db/drop-table",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterDbServer, mthList)
	xgen.Add(RegisterDbHandler, nil)
	xgen.Add(RegisterDbGinServer, nil)
}
func RegisterDbGinServer(r gin.IRouter, server DbServer) {
	xerror.Assert(r == nil || server == nil, "router or server is nil")
	r.Handle("POST", "/db/db/create", func(ctx *gin.Context) {
		var req = new(CreateRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Create(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/db/db/read", func(ctx *gin.Context) {
		var req = new(ReadRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Read(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/db/db/update", func(ctx *gin.Context) {
		var req = new(UpdateRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Update(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/db/db/delete", func(ctx *gin.Context) {
		var req = new(DeleteRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Delete(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/db/db/truncate", func(ctx *gin.Context) {
		var req = new(TruncateRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Truncate(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/db/db/count", func(ctx *gin.Context) {
		var req = new(CountRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Count(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/db/db/rename-table", func(ctx *gin.Context) {
		var req = new(RenameTableRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.RenameTable(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/db/db/list-tables", func(ctx *gin.Context) {
		var req = new(ListTablesRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.ListTables(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/db/db/drop-table", func(ctx *gin.Context) {
		var req = new(DropTableRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.DropTable(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
}
